// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GF_GIGAFLOW_DATA_H_
#define FLATBUFFERS_GENERATED_GF_GIGAFLOW_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace GigaFlow {
namespace Data {

struct GFRecord;

struct GFRecord FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORD_ID = 4,
    VT_DEV_IP = 6,
    VT_CLIENT_ADDR = 8,
    VT_SERVER_ADDR = 10,
    VT_INIF = 12,
    VT_OUTIF = 14,
    VT_PACKETS1TO2 = 16,
    VT_BYTES1TO2 = 18,
    VT_DURATION1TO2 = 20,
    VT_PACKETS2TO1 = 22,
    VT_BYTES2TO1 = 24,
    VT_DURATION2TO1 = 26,
    VT_PORT = 28,
    VT_FLAGS = 30,
    VT_PROTO = 32,
    VT_TOS = 34,
    VT_USER = 36,
    VT_DOMAIN = 38,
    VT_MACSRC = 40,
    VT_MACDST = 42,
    VT_RESPONSE1TO2 = 44,
    VT_RESPONSECOUNT1TO2 = 46,
    VT_FLOWS1TO2 = 48,
    VT_RESPONSE2TO1 = 50,
    VT_RESPONSECOUNT2TO1 = 52,
    VT_FLOWS2TO1 = 54,
    VT_URL = 56,
    VT_FWEVENT = 58,
    VT_FWEXTCODE = 60,
    VT_STARTTIME = 62,
    VT_TRUESTARTTIME = 64,
    VT_ENDTIME = 66,
    VT_SRCAS = 68,
    VT_DSTAS = 70
  };
  int64_t record_id() const {
    return GetField<int64_t>(VT_RECORD_ID, 0);
  }
  const flatbuffers::Vector<uint8_t> *dev_ip() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DEV_IP);
  }
  const flatbuffers::Vector<uint8_t> *client_addr() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CLIENT_ADDR);
  }
  const flatbuffers::Vector<uint8_t> *server_addr() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SERVER_ADDR);
  }
  int32_t inif() const {
    return GetField<int32_t>(VT_INIF, 0);
  }
  int32_t outif() const {
    return GetField<int32_t>(VT_OUTIF, 0);
  }
  int64_t packets1to2() const {
    return GetField<int64_t>(VT_PACKETS1TO2, 0);
  }
  int64_t bytes1to2() const {
    return GetField<int64_t>(VT_BYTES1TO2, 0);
  }
  int64_t duration1to2() const {
    return GetField<int64_t>(VT_DURATION1TO2, 0);
  }
  int64_t packets2to1() const {
    return GetField<int64_t>(VT_PACKETS2TO1, 0);
  }
  int64_t bytes2to1() const {
    return GetField<int64_t>(VT_BYTES2TO1, 0);
  }
  int64_t duration2to1() const {
    return GetField<int64_t>(VT_DURATION2TO1, 0);
  }
  int32_t port() const {
    return GetField<int32_t>(VT_PORT, 0);
  }
  int32_t flags() const {
    return GetField<int32_t>(VT_FLAGS, 0);
  }
  int32_t proto() const {
    return GetField<int32_t>(VT_PROTO, 0);
  }
  int32_t tos() const {
    return GetField<int32_t>(VT_TOS, 0);
  }
  const flatbuffers::String *user() const {
    return GetPointer<const flatbuffers::String *>(VT_USER);
  }
  const flatbuffers::String *domain() const {
    return GetPointer<const flatbuffers::String *>(VT_DOMAIN);
  }
  uint64_t macsrc() const {
    return GetField<uint64_t>(VT_MACSRC, 0);
  }
  uint64_t macdst() const {
    return GetField<uint64_t>(VT_MACDST, 0);
  }
  int32_t response1to2() const {
    return GetField<int32_t>(VT_RESPONSE1TO2, 0);
  }
  int32_t responseCount1to2() const {
    return GetField<int32_t>(VT_RESPONSECOUNT1TO2, 0);
  }
  int32_t flows1to2() const {
    return GetField<int32_t>(VT_FLOWS1TO2, 0);
  }
  int32_t response2to1() const {
    return GetField<int32_t>(VT_RESPONSE2TO1, 0);
  }
  int32_t responseCount2to1() const {
    return GetField<int32_t>(VT_RESPONSECOUNT2TO1, 0);
  }
  int32_t flows2to1() const {
    return GetField<int32_t>(VT_FLOWS2TO1, 0);
  }
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  const flatbuffers::String *fwevent() const {
    return GetPointer<const flatbuffers::String *>(VT_FWEVENT);
  }
  const flatbuffers::String *fwextcode() const {
    return GetPointer<const flatbuffers::String *>(VT_FWEXTCODE);
  }
  uint64_t startTime() const {
    return GetField<uint64_t>(VT_STARTTIME, 0);
  }
  uint64_t trueStartTime() const {
    return GetField<uint64_t>(VT_TRUESTARTTIME, 0);
  }
  uint64_t endTime() const {
    return GetField<uint64_t>(VT_ENDTIME, 0);
  }
  int32_t srcas() const {
    return GetField<int32_t>(VT_SRCAS, 0);
  }
  int32_t dstas() const {
    return GetField<int32_t>(VT_DSTAS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_RECORD_ID) &&
           VerifyOffset(verifier, VT_DEV_IP) &&
           verifier.VerifyVector(dev_ip()) &&
           VerifyOffset(verifier, VT_CLIENT_ADDR) &&
           verifier.VerifyVector(client_addr()) &&
           VerifyOffset(verifier, VT_SERVER_ADDR) &&
           verifier.VerifyVector(server_addr()) &&
           VerifyField<int32_t>(verifier, VT_INIF) &&
           VerifyField<int32_t>(verifier, VT_OUTIF) &&
           VerifyField<int64_t>(verifier, VT_PACKETS1TO2) &&
           VerifyField<int64_t>(verifier, VT_BYTES1TO2) &&
           VerifyField<int64_t>(verifier, VT_DURATION1TO2) &&
           VerifyField<int64_t>(verifier, VT_PACKETS2TO1) &&
           VerifyField<int64_t>(verifier, VT_BYTES2TO1) &&
           VerifyField<int64_t>(verifier, VT_DURATION2TO1) &&
           VerifyField<int32_t>(verifier, VT_PORT) &&
           VerifyField<int32_t>(verifier, VT_FLAGS) &&
           VerifyField<int32_t>(verifier, VT_PROTO) &&
           VerifyField<int32_t>(verifier, VT_TOS) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyString(user()) &&
           VerifyOffset(verifier, VT_DOMAIN) &&
           verifier.VerifyString(domain()) &&
           VerifyField<uint64_t>(verifier, VT_MACSRC) &&
           VerifyField<uint64_t>(verifier, VT_MACDST) &&
           VerifyField<int32_t>(verifier, VT_RESPONSE1TO2) &&
           VerifyField<int32_t>(verifier, VT_RESPONSECOUNT1TO2) &&
           VerifyField<int32_t>(verifier, VT_FLOWS1TO2) &&
           VerifyField<int32_t>(verifier, VT_RESPONSE2TO1) &&
           VerifyField<int32_t>(verifier, VT_RESPONSECOUNT2TO1) &&
           VerifyField<int32_t>(verifier, VT_FLOWS2TO1) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           VerifyOffset(verifier, VT_FWEVENT) &&
           verifier.VerifyString(fwevent()) &&
           VerifyOffset(verifier, VT_FWEXTCODE) &&
           verifier.VerifyString(fwextcode()) &&
           VerifyField<uint64_t>(verifier, VT_STARTTIME) &&
           VerifyField<uint64_t>(verifier, VT_TRUESTARTTIME) &&
           VerifyField<uint64_t>(verifier, VT_ENDTIME) &&
           VerifyField<int32_t>(verifier, VT_SRCAS) &&
           VerifyField<int32_t>(verifier, VT_DSTAS) &&
           verifier.EndTable();
  }
};

struct GFRecordBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_record_id(int64_t record_id) {
    fbb_.AddElement<int64_t>(GFRecord::VT_RECORD_ID, record_id, 0);
  }
  void add_dev_ip(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dev_ip) {
    fbb_.AddOffset(GFRecord::VT_DEV_IP, dev_ip);
  }
  void add_client_addr(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> client_addr) {
    fbb_.AddOffset(GFRecord::VT_CLIENT_ADDR, client_addr);
  }
  void add_server_addr(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> server_addr) {
    fbb_.AddOffset(GFRecord::VT_SERVER_ADDR, server_addr);
  }
  void add_inif(int32_t inif) {
    fbb_.AddElement<int32_t>(GFRecord::VT_INIF, inif, 0);
  }
  void add_outif(int32_t outif) {
    fbb_.AddElement<int32_t>(GFRecord::VT_OUTIF, outif, 0);
  }
  void add_packets1to2(int64_t packets1to2) {
    fbb_.AddElement<int64_t>(GFRecord::VT_PACKETS1TO2, packets1to2, 0);
  }
  void add_bytes1to2(int64_t bytes1to2) {
    fbb_.AddElement<int64_t>(GFRecord::VT_BYTES1TO2, bytes1to2, 0);
  }
  void add_duration1to2(int64_t duration1to2) {
    fbb_.AddElement<int64_t>(GFRecord::VT_DURATION1TO2, duration1to2, 0);
  }
  void add_packets2to1(int64_t packets2to1) {
    fbb_.AddElement<int64_t>(GFRecord::VT_PACKETS2TO1, packets2to1, 0);
  }
  void add_bytes2to1(int64_t bytes2to1) {
    fbb_.AddElement<int64_t>(GFRecord::VT_BYTES2TO1, bytes2to1, 0);
  }
  void add_duration2to1(int64_t duration2to1) {
    fbb_.AddElement<int64_t>(GFRecord::VT_DURATION2TO1, duration2to1, 0);
  }
  void add_port(int32_t port) {
    fbb_.AddElement<int32_t>(GFRecord::VT_PORT, port, 0);
  }
  void add_flags(int32_t flags) {
    fbb_.AddElement<int32_t>(GFRecord::VT_FLAGS, flags, 0);
  }
  void add_proto(int32_t proto) {
    fbb_.AddElement<int32_t>(GFRecord::VT_PROTO, proto, 0);
  }
  void add_tos(int32_t tos) {
    fbb_.AddElement<int32_t>(GFRecord::VT_TOS, tos, 0);
  }
  void add_user(flatbuffers::Offset<flatbuffers::String> user) {
    fbb_.AddOffset(GFRecord::VT_USER, user);
  }
  void add_domain(flatbuffers::Offset<flatbuffers::String> domain) {
    fbb_.AddOffset(GFRecord::VT_DOMAIN, domain);
  }
  void add_macsrc(uint64_t macsrc) {
    fbb_.AddElement<uint64_t>(GFRecord::VT_MACSRC, macsrc, 0);
  }
  void add_macdst(uint64_t macdst) {
    fbb_.AddElement<uint64_t>(GFRecord::VT_MACDST, macdst, 0);
  }
  void add_response1to2(int32_t response1to2) {
    fbb_.AddElement<int32_t>(GFRecord::VT_RESPONSE1TO2, response1to2, 0);
  }
  void add_responseCount1to2(int32_t responseCount1to2) {
    fbb_.AddElement<int32_t>(GFRecord::VT_RESPONSECOUNT1TO2, responseCount1to2, 0);
  }
  void add_flows1to2(int32_t flows1to2) {
    fbb_.AddElement<int32_t>(GFRecord::VT_FLOWS1TO2, flows1to2, 0);
  }
  void add_response2to1(int32_t response2to1) {
    fbb_.AddElement<int32_t>(GFRecord::VT_RESPONSE2TO1, response2to1, 0);
  }
  void add_responseCount2to1(int32_t responseCount2to1) {
    fbb_.AddElement<int32_t>(GFRecord::VT_RESPONSECOUNT2TO1, responseCount2to1, 0);
  }
  void add_flows2to1(int32_t flows2to1) {
    fbb_.AddElement<int32_t>(GFRecord::VT_FLOWS2TO1, flows2to1, 0);
  }
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(GFRecord::VT_URL, url);
  }
  void add_fwevent(flatbuffers::Offset<flatbuffers::String> fwevent) {
    fbb_.AddOffset(GFRecord::VT_FWEVENT, fwevent);
  }
  void add_fwextcode(flatbuffers::Offset<flatbuffers::String> fwextcode) {
    fbb_.AddOffset(GFRecord::VT_FWEXTCODE, fwextcode);
  }
  void add_startTime(uint64_t startTime) {
    fbb_.AddElement<uint64_t>(GFRecord::VT_STARTTIME, startTime, 0);
  }
  void add_trueStartTime(uint64_t trueStartTime) {
    fbb_.AddElement<uint64_t>(GFRecord::VT_TRUESTARTTIME, trueStartTime, 0);
  }
  void add_endTime(uint64_t endTime) {
    fbb_.AddElement<uint64_t>(GFRecord::VT_ENDTIME, endTime, 0);
  }
  void add_srcas(int32_t srcas) {
    fbb_.AddElement<int32_t>(GFRecord::VT_SRCAS, srcas, 0);
  }
  void add_dstas(int32_t dstas) {
    fbb_.AddElement<int32_t>(GFRecord::VT_DSTAS, dstas, 0);
  }
  explicit GFRecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GFRecordBuilder &operator=(const GFRecordBuilder &);
  flatbuffers::Offset<GFRecord> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GFRecord>(end);
    return o;
  }
};

inline flatbuffers::Offset<GFRecord> CreateGFRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t record_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> dev_ip = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> client_addr = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> server_addr = 0,
    int32_t inif = 0,
    int32_t outif = 0,
    int64_t packets1to2 = 0,
    int64_t bytes1to2 = 0,
    int64_t duration1to2 = 0,
    int64_t packets2to1 = 0,
    int64_t bytes2to1 = 0,
    int64_t duration2to1 = 0,
    int32_t port = 0,
    int32_t flags = 0,
    int32_t proto = 0,
    int32_t tos = 0,
    flatbuffers::Offset<flatbuffers::String> user = 0,
    flatbuffers::Offset<flatbuffers::String> domain = 0,
    uint64_t macsrc = 0,
    uint64_t macdst = 0,
    int32_t response1to2 = 0,
    int32_t responseCount1to2 = 0,
    int32_t flows1to2 = 0,
    int32_t response2to1 = 0,
    int32_t responseCount2to1 = 0,
    int32_t flows2to1 = 0,
    flatbuffers::Offset<flatbuffers::String> url = 0,
    flatbuffers::Offset<flatbuffers::String> fwevent = 0,
    flatbuffers::Offset<flatbuffers::String> fwextcode = 0,
    uint64_t startTime = 0,
    uint64_t trueStartTime = 0,
    uint64_t endTime = 0,
    int32_t srcas = 0,
    int32_t dstas = 0) {
  GFRecordBuilder builder_(_fbb);
  builder_.add_endTime(endTime);
  builder_.add_trueStartTime(trueStartTime);
  builder_.add_startTime(startTime);
  builder_.add_macdst(macdst);
  builder_.add_macsrc(macsrc);
  builder_.add_duration2to1(duration2to1);
  builder_.add_bytes2to1(bytes2to1);
  builder_.add_packets2to1(packets2to1);
  builder_.add_duration1to2(duration1to2);
  builder_.add_bytes1to2(bytes1to2);
  builder_.add_packets1to2(packets1to2);
  builder_.add_record_id(record_id);
  builder_.add_dstas(dstas);
  builder_.add_srcas(srcas);
  builder_.add_fwextcode(fwextcode);
  builder_.add_fwevent(fwevent);
  builder_.add_url(url);
  builder_.add_flows2to1(flows2to1);
  builder_.add_responseCount2to1(responseCount2to1);
  builder_.add_response2to1(response2to1);
  builder_.add_flows1to2(flows1to2);
  builder_.add_responseCount1to2(responseCount1to2);
  builder_.add_response1to2(response1to2);
  builder_.add_domain(domain);
  builder_.add_user(user);
  builder_.add_tos(tos);
  builder_.add_proto(proto);
  builder_.add_flags(flags);
  builder_.add_port(port);
  builder_.add_outif(outif);
  builder_.add_inif(inif);
  builder_.add_server_addr(server_addr);
  builder_.add_client_addr(client_addr);
  builder_.add_dev_ip(dev_ip);
  return builder_.Finish();
}

inline flatbuffers::Offset<GFRecord> CreateGFRecordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t record_id = 0,
    const std::vector<uint8_t> *dev_ip = nullptr,
    const std::vector<uint8_t> *client_addr = nullptr,
    const std::vector<uint8_t> *server_addr = nullptr,
    int32_t inif = 0,
    int32_t outif = 0,
    int64_t packets1to2 = 0,
    int64_t bytes1to2 = 0,
    int64_t duration1to2 = 0,
    int64_t packets2to1 = 0,
    int64_t bytes2to1 = 0,
    int64_t duration2to1 = 0,
    int32_t port = 0,
    int32_t flags = 0,
    int32_t proto = 0,
    int32_t tos = 0,
    const char *user = nullptr,
    const char *domain = nullptr,
    uint64_t macsrc = 0,
    uint64_t macdst = 0,
    int32_t response1to2 = 0,
    int32_t responseCount1to2 = 0,
    int32_t flows1to2 = 0,
    int32_t response2to1 = 0,
    int32_t responseCount2to1 = 0,
    int32_t flows2to1 = 0,
    const char *url = nullptr,
    const char *fwevent = nullptr,
    const char *fwextcode = nullptr,
    uint64_t startTime = 0,
    uint64_t trueStartTime = 0,
    uint64_t endTime = 0,
    int32_t srcas = 0,
    int32_t dstas = 0) {
  auto dev_ip__ = dev_ip ? _fbb.CreateVector<uint8_t>(*dev_ip) : 0;
  auto client_addr__ = client_addr ? _fbb.CreateVector<uint8_t>(*client_addr) : 0;
  auto server_addr__ = server_addr ? _fbb.CreateVector<uint8_t>(*server_addr) : 0;
  auto user__ = user ? _fbb.CreateString(user) : 0;
  auto domain__ = domain ? _fbb.CreateString(domain) : 0;
  auto url__ = url ? _fbb.CreateString(url) : 0;
  auto fwevent__ = fwevent ? _fbb.CreateString(fwevent) : 0;
  auto fwextcode__ = fwextcode ? _fbb.CreateString(fwextcode) : 0;
  return GigaFlow::Data::CreateGFRecord(
      _fbb,
      record_id,
      dev_ip__,
      client_addr__,
      server_addr__,
      inif,
      outif,
      packets1to2,
      bytes1to2,
      duration1to2,
      packets2to1,
      bytes2to1,
      duration2to1,
      port,
      flags,
      proto,
      tos,
      user__,
      domain__,
      macsrc,
      macdst,
      response1to2,
      responseCount1to2,
      flows1to2,
      response2to1,
      responseCount2to1,
      flows2to1,
      url__,
      fwevent__,
      fwextcode__,
      startTime,
      trueStartTime,
      endTime,
      srcas,
      dstas);
}

inline const GigaFlow::Data::GFRecord *GetGFRecord(const void *buf) {
  return flatbuffers::GetRoot<GigaFlow::Data::GFRecord>(buf);
}

inline const GigaFlow::Data::GFRecord *GetSizePrefixedGFRecord(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GigaFlow::Data::GFRecord>(buf);
}

inline bool VerifyGFRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GigaFlow::Data::GFRecord>(nullptr);
}

inline bool VerifySizePrefixedGFRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GigaFlow::Data::GFRecord>(nullptr);
}

inline void FinishGFRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GigaFlow::Data::GFRecord> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGFRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GigaFlow::Data::GFRecord> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Data
}  // namespace GigaFlow

#endif  // FLATBUFFERS_GENERATED_GF_GIGAFLOW_DATA_H_
